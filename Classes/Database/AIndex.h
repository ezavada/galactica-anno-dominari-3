// =============================================================================// AIndex.h             	         ©1995-96, Sacred Tree Software, inc.// // Index contains routines and objects needed for indexing fields of a record// in a file for a database management system. Abstract Class.//// version 1.5.0//// created:   7/28/96, ERZ//// =============================================================================#pragma once#include <LStream.h>#include "DatabaseTypes.h"#pragma options align=mac68ktypedef struct KeyEntryT {	RecIDT	recID;	Int8	keyData[];} KeyEntryT, *KeyEntryPtr;#pragma options align=resetenum {	key_Unique		= true,	key_NonUnique	= false};class UDatabaseKey;typedef class AIndex {public:              AIndex(UDatabaseKey *inKey);              ~AIndex();			Boolean		SetBatchMode(Boolean inBatchMode);// general purpose data access methods	RecIDT		FindKey(void* inRawKeyData, UInt32 inRawSize = -1);	RecIDT		FindNthKeyOccurance(void* inRawKeyData, long inWhich, UInt32 inRawSize = -1);	void		AddKey(RecIDT inRecID, void* inRawKeyData, Boolean inUnique) 									{ AddKey(inRecID, inRawKeyData, -1, inUnique); }	void		AddKey(RecIDT inRecID, void* inRawKeyData, UInt32 inRawSize = -1, Boolean inUnique = key_NonUnique);	void		UpdateKey(RecIDT inRecID, void* inOldRawKeyData, void* inNewRawKeyData)									{ UpdateKey(inRecID, inOldRawKeyData, -1, inNewRawKeyData, -1); }							void		UpdateKey(RecIDT inRecID, void* inOldRawKeyData, UInt32 inOldRawSize,											void* inNewRawKeyData, UInt32 inNewRawSize);	void		DeleteKey(RecIDT inRecID, void* inRawKeyData, UInt32 inRawSize = -1);// special purpose access methods		UInt8		GetKeyEntrySize() {return mKeyEntrySize;}	UInt32		GetEntryCount() const;	Boolean		FetchEntryAt(UInt32 inAtIndex, KeyEntryT &outEntry);	UInt32		FetchEntry(KeyEntryT &ioEntry);		virtual Boolean		Open();	virtual void		Close();	protected:	Boolean		BinarySearch(KeyEntryT &ioEntry, Uint32 &outEntryPos);	void		ShiftItems(Uint32 inStartPos, Uint32 inEndPos, Uint32 inDestPos);		Uint32		AddSpace();	void		PeekEntry(Uint32 inAtIndex, KeyEntryT &outEntry);	void		PokeEntry(Uint32 inAtIndex, const KeyEntryT &inEntry);		Boolean 	ReadHeader();	void		WriteHeader(Boolean inIndexOpen = true);	Boolean		HeaderExists()	{return (itsStream->GetLength() > 0);}		UDatabaseKey 	*itsKey;	LStream 		*itsStream;		Int32	mKeyEntrySize;	Int32	mItemCount;	Int32	mAllocatedSlots;	Int32	mFirstItemPos;	Int32	mNumValidEntries;	Boolean mBatchMode;	Boolean	mIndexOpen;} AIndex, *AIndexPtr;
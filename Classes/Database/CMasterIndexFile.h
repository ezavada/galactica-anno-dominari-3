// =============================================================================// CMasterIndexFile.h                      ©1995-96, Sacred Tree Software, inc.// // Index contains routines and objects needed for a master index// file object for a database management system.//// version 1.5.3//// created:   7/19/95, ERZ// modified:  7/29/95, ERZ added inherited methods for Stream access// modified:   2/2/96, ERZ now does autodetect of fixed vs. variable sized Indexable// modified:  3/29/96, ERZ changed initialization process, essentially rewrote everything// modified:  4/14/96, ERZ added file permissions as optional params to Open methods// modified:  4/15/96, ERZ added Close() override// modified:  7/27/96, ERZ	ver 1.5, added ConvertDataFileSpecToIndexFileSpec() to//								simplify initialization process// modified:  8/12/96, ERZ	changed OpenExisting() param order to match ::ResolveAlias()// modified:  9/26/98, ERZ	v1.5.2, removed file permission from OpenNew(), which must//								have Exclusive Read/Write privileges//// modified: 10/23/05, ERZ  v1.5.3, changed to use platform neutral CFileStream instead of LFileStream// =============================================================================#ifndef CMASTERINDEXFILE_H_INCLUDED#define CMASTERINDEXFILE_H_INCLUDED#include "DatabaseTypes.h"#include "AMasterIndex.h"#include "CFileStream.h"class CMasterIndexFile : public AMasterIndex, public CFileStream {public:	CMasterIndexFile();	void	OpenNew(const char* inPath, const char* inName, const char* inCreator = "????");	// creates and initializes new index file	void	OpenExisting(const char* inPath, const char* inName, int inPrivileges = CFileStream::privileges_ReadWrite);    void    Backup(const char* appendToFilename);	virtual void	Close();	void	ConvertDataFileNameToIndexFileName(char* ioFileName);	virtual void WriteHeader(bool inIndexOpen = true);};#endif // CMASTERINDEXFILE_H_INCLUDED
// =============================================================================// UDatabaseKey.h             	         	©1996, Sacred Tree Software, inc.// // UDatabaseKey is an abstract class for converting standard field data from a// record into a Key to be stored in an Index file.// // This file also contains UDatabase Key subclasses for the standard data types.//// It is a subclass of LComparator, so it knows how to compare keys as well.//// version 1.5.0//// created:   7/28/96, ERZ//// =============================================================================#pragma once#include <PP_Prefix.h>#include <LComparator.h>#include "DatabaseTypes.h"// ÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑtypedef class UDatabaseKey : public LComparator {public:	virtual UInt8		GetKeySize() const = 0;	virtual void		MakeKey(const void* inRawKeyData, void* outKeyData, UInt32 inRawSize = -1) const;	virtual	Int32		CompareKeys(const void* inKey1, const void* inKey2) const;	virtual	Int32		CompareToKey(const void* inItem, Uint32 inSize, const void* inKey) const;						} UDatabaseKey, *UDatabaseKeyPtr;typedef class UFloatDBKey : public UDatabaseKey {public:	virtual UInt8		GetKeySize() const {return sizeof(float);}} UFloatDBKey, *UFloatDBKeyPtr;typedef class UDoubleFloatDBKey : public UDatabaseKey {public:	virtual UInt8		GetKeySize() const {return sizeof(double);}} UDoubleFloatDBKey, *UDoubleFloatDBKeyPtr;typedef class ULongDoubleFloatDBKey : public UDatabaseKey {public:	virtual UInt8		GetKeySize() const {return sizeof(long double);}} ULongDoubleFloatDBKey, *ULongDoubleFloatDBKeyPtr;typedef class ULongDBKey : public UDatabaseKey {public:	virtual UInt8		GetKeySize() const {return sizeof(Int32);}} ULongDBKey, *ULongDBKeyPtr;#define UFixedDBKey ULongDBKey#define UFixedDBKeyPtr ULongDBKeyPtrtypedef class ULongLongDBKey : public UDatabaseKey {	// 2 longs (a 64 bit number)public:	virtual UInt8		GetKeySize() const {return sizeof(Int32)+sizeof(Int32);}} ULongLongDBKey, *ULongLongDBKeyPtr;typedef class UShortDBKey : public UDatabaseKey {public:	virtual UInt8		GetKeySize() const {return sizeof(Int16);}} UShortDBKey, *UShortDBKeyPtr;typedef class UStrDBKey : public UDatabaseKey {public:	virtual UInt8		GetKeySize() const {return 8;}} UStrDBKey, *UStrDBKeyPtr;typedef class UBoolDBKey : public UDatabaseKey {public:	virtual UInt8		GetKeySize() const {return 1;}	virtual void		MakeKey(const void* inRawKeyData, void* outKeyData, UInt32 inRawSize = -1) const;} UBoolDBKey, *UBoolDBKeyPtr;#if _MacOStypedef class UDateTimeDBKey : public UDatabaseKey {public:	virtual UInt8		GetKeySize() const {return sizeof(DateTimeRec);}} UDateTimeDBKey, *UDateTimeDBKeyPtr;#endiftypedef class URecIdDBKey : public UDatabaseKey {public:	virtual UInt8		GetKeySize() const {return sizeof(RecIDT);}} URecIdDBKey, *URecIdDBKeyPtr;
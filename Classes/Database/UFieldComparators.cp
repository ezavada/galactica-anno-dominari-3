// =============================================================================// UFieldComparators.cp						й1997, Sacred Tree Software, inc.// // implements a collection of LComparator subclasses that can compare various types// of data in fields of records.//// version 1.0//// created:   1/20/97, ERZ// modified:  //// =============================================================================#include "UFieldComparators.h"#include <UMemoryMgr.h>UBoolComparator*		UBoolComparator::sBoolComparator = (UBoolComparator*)nil;ULongLongComparator*	ULongLongComparator::sLongLongComparator = (ULongLongComparator*)nil;UShortComparator*		UShortComparator::sShortComparator = (UShortComparator*)nil;UCharComparator*		UCharComparator::sCharComparator = (UCharComparator*)nil;UFloatComparator*		UFloatComparator::sFloatComparator = (UFloatComparator*)nil;UDoubleComparator*		UDoubleComparator::sDoubleComparator = (UDoubleComparator*)nil;ULongDoubleComparator*	ULongDoubleComparator::sLongDoubleComparator = (ULongDoubleComparator*)nil;UDataComparator*		UDataComparator::sDataComparator = (UDataComparator*)nil;UTextComparator*		UTextComparator::sTextComparator = (UTextComparator*)nil;UStrComparator*			UStrComparator::sStrComparator = (UStrComparator*)nil;Int32UBoolComparator::Compare(const void* inItemOne, const void* inItemTwo, Uint32, Uint32) const {	Boolean b1 = (*(Boolean*)inItemOne == true), b2 = (*(Boolean*)inItemTwo == true);	return !(b1 == b2);}UBoolComparator*UBoolComparator::GetComparator() {	if (sBoolComparator == nil) {		sBoolComparator = new UBoolComparator;	}	return sBoolComparator;}#pragma mark-Int32ULongLongComparator::Compare(const void* inItemOne, const void* inItemTwo, Uint32, Uint32) const {	long *lp1 = (long*)inItemOne, *lp2 = (long*)inItemTwo;	long result = *lp1 - *lp2;	if (result == 0)		result = *(++lp1) - *(++lp2);	return result;}ULongLongComparator*ULongLongComparator::GetComparator() {	if (sLongLongComparator == nil) {		sLongLongComparator = new ULongLongComparator;	}	return sLongLongComparator;}#pragma mark-Int32UShortComparator::Compare(const void* inItemOne, const void* inItemTwo, Uint32, Uint32) const {	return *((short*)inItemOne) - *((short*)inItemTwo);}UShortComparator*UShortComparator::GetComparator() {	if (sShortComparator == nil) {		sShortComparator = new UShortComparator;	}	return sShortComparator;}#pragma mark-UCharComparator;Int32UCharComparator::Compare(const void* inItemOne, const void* inItemTwo, Uint32, Uint32) const {	return *((char*)inItemOne) - *((char*)inItemTwo);}UCharComparator*UCharComparator::GetComparator() {	if (sCharComparator == nil) {		sCharComparator = new UCharComparator;	}	return sCharComparator;}#pragma mark-Int32UFloatComparator::Compare(const void* inItemOne, const void* inItemTwo, Uint32, Uint32) const {	return *((float*)inItemOne) - *((float*)inItemTwo);}UFloatComparator*UFloatComparator::GetComparator() {	if (sFloatComparator == nil) {		sFloatComparator = new UFloatComparator;	}	return sFloatComparator;}#pragma mark-Int32UDoubleComparator::Compare(const void* inItemOne, const void* inItemTwo, Uint32, Uint32) const {	return *((double*)inItemOne) - *((double*)inItemTwo);}UDoubleComparator*UDoubleComparator::GetComparator() {	if (sDoubleComparator == nil) {		sDoubleComparator = new UDoubleComparator;	}	return sDoubleComparator;}#pragma mark-ULongDoubleComparator;Int32ULongDoubleComparator::Compare(const void* inItemOne, const void* inItemTwo, Uint32, Uint32) const {	return *((long double*)inItemOne) - *((long double*)inItemTwo);}ULongDoubleComparator*ULongDoubleComparator::GetComparator() {	if (sLongDoubleComparator == nil) {		sLongDoubleComparator = new ULongDoubleComparator;	}	return sLongDoubleComparator;}#pragma mark-;Int32UDataComparator::Compare(const void* inItemOne, const void* inItemTwo, 							Uint32 inSizeOne, Uint32 inSizeTwo) const {	return ::BlockCompare(inItemOne, inItemTwo, inSizeOne, inSizeTwo);}UDataComparator*UDataComparator::GetComparator() {	if (sDataComparator == nil) {		sDataComparator = new UDataComparator;	}	return sDataComparator;}#pragma mark-Int32UTextComparator::Compare(const void*, const void*, Uint32, Uint32) const { //inItemOne, inItemTwo	int junk; // еее Text Compare NOT YET IMPLEMENTED ееее	return 0;}UTextComparator*UTextComparator::GetComparator() {	if (sTextComparator == nil) {		sTextComparator = new UTextComparator;	}	return sTextComparator;}#pragma mark-Int32UStrComparator::Compare(const void*, const void*, Uint32, Uint32) const { //inItemOne, inItemTwo	int junk; // еее String Compare NOT YET IMPLEMENTED ееее	return 0;}UStrComparator*UStrComparator::GetComparator() {	if (sStrComparator == nil) {		sStrComparator = new UStrComparator;	}	return sStrComparator;}
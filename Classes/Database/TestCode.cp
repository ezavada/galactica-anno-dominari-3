// =============================================================================// TestCode.cp                               ©1995, Sacred Tree Software, inc.// // Code to test database file object. //// version 1.2//// created:   7/11/95, ERZ// modified:  7/14/95, ERZ	Changed try/catch to Try_/Catch PP macros// modified:  7/30/95, ERZ	added ID # display to failure reporting//// =============================================================================#include "os_platform.h"#if _MacOS  #ifndef __EVENTS__    #include <Events.h>  #endif#endif#include <UMemoryMgr.h>#include <iostream.h>#include "TestCode.h"#if _Win32	HANDLE gCinH;	HANDLE gCOutH;	HANDLE gCErrH;#endifvoidInitConsole() {#if _MacOS	cout << "\n\n";	// let SIOUX init the Mac toolbox#elif _Win32	::AllocConsole();	cout << "Console Inited...\n\n";	gCinH = ::GetStdHandle(STD_INPUT_HANDLE);	gCOutH = ::GetStdHandle(STD_OUTPUT_HANDLE);	gCErrH = ::GetStdHandle(STD_ERROR_HANDLE);#endif}#define SHOW_ADD_OUTPUT 0#define SHOW_READ_OUTPUT 0#define SHOW_UPDATE_OUTPUT 0#define SHOW_DELETE_OUTPUT 0#define SHOW_LIFECYCLE_OUTPUT 0#define SHOW_STRESS_OUTPUT 1#define TEST_EXCEPTIONS 0// ============================== UTILITY CODE ========================================int gSizeFactor = 1;DatabaseRecPtr MakeRecord(long inDataSize) {    TestRecPtr recP;    char c;    inDataSize *= gSizeFactor;    if (inDataSize < sizeof(TestRecT))    	inDataSize += 100;  	char* p = new char[inDataSize];		// make DatabaseRecPtr size specified    long size = inDataSize - sizeof(TestRecT);	//subtract out size of defined fields 	ThrowIfMemFail_(p);    recP = (TestRecPtr) p;    recP->recPos = 0;    recP->recID = 0;    recP->recSize = inDataSize;    recP->recCookie = ::TickCount();    for (int i = 0; i < (size-1); i++) { // fill in remaining space with string        c = ( (i % 10) + '0');        if ('0' == c)            c = '|';        recP->recData[i] = c;    };    recP->recData[size-1] = 0;     // make sure to include C string terminator    return (DatabaseRecPtr)recP;}void FreeRecord(DatabaseRecPtr inRecP) {    delete (char*)inRecP;}void DrawRecord(DatabaseRecPtr inRecP) {	TestRecPtr p = (TestRecPtr) inRecP;    char *s = (char*)&p->recData;    cout << inRecP->recID << '\n';    cout << "     Pos: " << inRecP->recPos << "    Size: " << inRecP->recSize << '\n';    cout << "     Data: " << p->recCookie << ", ";    cout << s << '\n';}Boolean RecordsEqual(DatabaseRecPtr inRec1, DatabaseRecPtr inRec2) {	TestRecPtr p1 = (TestRecPtr) inRec1;	TestRecPtr p2 = (TestRecPtr) inRec2;   Boolean recsEqual = true;   long recSize = inRec1->recSize - sizeof(TestRecT);	// only comparing the data, ignore other   if (inRec1->recID != inRec2->recID) {       cout << "The records differ:\n";       recsEqual = false;       cout << "     ID: " << inRec1->recID << " != " << inRec2->recID << '\n';   }   if (inRec1->recPos != inRec2->recPos) {       if (recsEqual)           cout << "The records differ:\n";       recsEqual = false;       cout << "     Pos: " << inRec1->recPos << " != " << inRec2->recPos << '\n';   }   if (inRec1->recSize != inRec2->recSize) {       if (recsEqual)           cout << "The records differ:\n";       recsEqual = false;       cout << "     Size: " << inRec1->recSize << " != " << inRec2->recSize << '\n';       if ((inRec2->recSize - sizeof(TestRecT)) < recSize)           recSize = inRec2->recSize - sizeof(TestRecT); // get the smaller size for comparing data   }   if (p1->recCookie != p2->recCookie) {       if (recsEqual)           cout << "The records differ:\n";       recsEqual = false;       cout << "     Cookie: " << p1->recCookie << " != " << p2->recCookie << '\n';   }   for (int i = 0; i < (recSize - 1); i++) {       if (p1->recData[i] != p2->recData[i]) {           if (recsEqual)               cout << "The records differ:\n";           cout << "     Data: starting at byte " << i << '\n';           cout << "          Rec 1: " << (char*)(&p1->recData[i]) << '\n';           cout << "          Rec 2: " << (char*)(&p2->recData[i]) << '\n';           break;           recsEqual = false;       }       else if ( (0 == p1->recData[i]) && (0 == p2->recData[i]) ) // found both terminators?           break;	// fixed length records may have an early terminator, don't compare junk that   }				// comes after terminator if both are equal up to the terminator    return (recsEqual);}#pragma mark-// ============================== TEST ROUTINES ========================================// ------------------------------ Test Adding ------------------------------// Adds a block of records using AddRecord()// Verifies that GetRecordCount(), GetNewRecordID(), and GetRecordSize() work// Verifies last record written using ReadRecord()// -------------------------------------------------------------------------RecIDT TestAdding(ADataStore *inDBFile, int numRecs) {    DatabaseRecPtr recP, bufferRecP;    long recSize, maxRecSize;    RecIDT firstID = 0;    RecIDT lastID = 0;    RecIDT newID;    long startCount;    cout << " ========================= Testing Adding ====================\n";    Try_ {        startCount = inDBFile->GetRecordCount();    }    Catch_ (inErr) {        cout << "FAILURE: GetRecordCount() caused an exception (1)\n";    }     for (int i = 0; i < numRecs; i++) {#if SHOW_ADD_OUTPUT        cout << "  Adding record " << i+1 << "....\n";#endif        recSize = 40 + Random() % 10 + Random() % 10;	// rec sizes from 20 to 60 bytes        recP = MakeRecord(recSize);                Try_ {            lastID = inDBFile->AddRecord(recP); 			newID = lastID;	            if (newID != lastID)                cout << "FAILURE: GetNewRecordID() != result of AddRecord(" << lastID << ")\n";            if (lastID != recP->recID)                cout << "FAILURE: AddRecord(" << lastID << ") result != returned DatabaseRec.recID\n";            if (newID != recP->recID)                cout << "FAILURE: GetNewRecordID() != AddRecord(" << lastID << ")'s DatabaseRec.recID\n";            if (0 == firstID)                firstID = lastID;            Try_ {                maxRecSize = inDBFile->GetRecordSize();	// check for fixed size records            }            Catch_ (inErr) {                cout << "FAILURE: GetRecordSize() caused an exception (1)\n";            }            Try_ {                recSize = inDBFile->GetRecordSize(lastID);            }            Catch_ (inErr) {                cout << "FAILURE: GetRecordSize(" << lastID << ") caused an exception (2)\n";            }            if (recSize != recP->recSize)                if (maxRecSize != recSize)                    cout << "FAILURE: GetRecordSize(" << lastID << ") != added DatabaseRec.recSize\n";        }        Catch_ (inErr) {            cout << "FAILURE: AddRecord() caused an exception on ID " << newID+1 << '\n';        }        if (i < (numRecs-1))            FreeRecord(recP);    }    Try_ {        long stopCount = inDBFile->GetRecordCount();    	if (stopCount != (startCount + numRecs) ) {    	    cout << "FAILURE: GetRecordCount() reports " << stopCount << " records instead of ";			cout << startCount+numRecs << '\n';    	}    }    Catch_ (inErr) {        cout << "FAILURE: GetRecordCount() caused an exception (2)\n";    }    if (0 == lastID) {        cout << "FAILURE: It seems that no records were added. Did GetRecordCount fail?\n";        return(0);    }    bufferRecP = MakeRecord(200);  // make buffer big enough to hold any record    bufferRecP->recID = lastID;    bufferRecP->recSize = 200;    Try_ {        inDBFile->ReadRecord(bufferRecP);       // try to read the last record back in        if (!RecordsEqual(bufferRecP, recP) )           cout << "FAILURE: ReadRecord(" << lastID <<") returns different data than AddRecord() added\n";    }    Catch_ (inErr) {        cout << "FAILURE: ReadRecord() caused an exception on ID" << lastID << '\n';    }    FreeRecord(recP);    FreeRecord(bufferRecP);    return(firstID);}// ----------------------------- Test Deleting -----------------------------// Deletes a block of records using DeleteRecord()// Verifies that GetRecordCount() works// checks exceptions// -------------------------------------------------------------------------void TestDeleting(ADataStore *inDBFile, RecIDT startID, int numRecs) {    long startCount = inDBFile->GetRecordCount();    long numFailures = 0;    long lastID;    cout << " ========================= Testing Deleting ====================\n";    for (int i = 0; i < numRecs; i++) {        lastID = startID + i;#if SHOW_DELETE_OUTPUT        cout << "  Deleting Record " << lastID << ".... \n";#endif        Try_ {            inDBFile->DeleteRecord(lastID);        }        Catch_ (inErr) {            cout << "FAILURE: DeleteRecord(" << lastID <<") caused an exception\n";            numFailures++;        }    }#if TEST_EXCEPTIONS 	cout << "  Trying to generate an exception from DeleteRecord()...\n";    Try_ {        inDBFile->DeleteRecord(lastID);        cout << "FAILURE: DeleteRecord(" << lastID <<") failed to cause an exception\n";    }    Catch_ (inErr) {        cout << "  Exception generated correctly.\n";    }#endif    long stopCount = inDBFile->GetRecordCount();    if (stopCount != (startCount - numRecs + numFailures) ) {        cout << "FAILURE: GetRecordCount() reports " << stopCount << " records instead of ";        cout << startCount-numRecs+numFailures << '\n';    }}// ------------------------------ Test Reading ------------------------------// Reads a block of records using ReadRecord() and displays them// checks exceptions// --------------------------------------------------------------------------void TestReading(ADataStore *inDBFile, RecIDT startID, int numRecs) {    cout << " ========================= Testing Reading ====================\n";    DatabaseRecPtr recP = MakeRecord(200);  // make buffer big enough to hold any record    long lastID;    cout << "  Reading records...\n";    for (int i = 0; i < numRecs; i++) {        lastID = startID + i;        recP->recID = lastID;        recP->recSize = 200;        Try_ {            inDBFile->ReadRecord(recP);#if SHOW_READ_OUTPUT            DrawRecord(recP);#endif        }        Catch_ (inErr) {            cout << "FAILURE: ReadRecord(" << lastID <<") caused an exception\n";    	}    }#if TEST_EXCEPTIONS     cout << "  Trying to generate an exception from ReadRecord(-1)...\n";    recP->recID = -1; 	// impossible ID    Try_ {        inDBFile->ReadRecord(recP);        cout << "FAILURE: ReadRecord(-1) failed to caused an exception for ID -1\n";    }    Catch_ (inErr) {        cout << "  Exception generated correctly.\n";    }#endif    FreeRecord(recP);}// ----------------------------- Test Updating -----------------------------// Updates a block of records using UpdateRecord()// Verifies that GetRecordSize() works// Verifies last record written using ReadRecord()// checks exceptions// -------------------------------------------------------------------------void TestUpdating(ADataStore *inDBFile, RecIDT startID, int numRecs) {    DatabaseRecPtr recP, bufferRecP;    long recSize, maxRecSize;    long startCount = inDBFile->GetRecordCount();    RecIDT lastID;    cout << " ========================= Testing Updating ====================\n";   for (int i = 0; i < numRecs; i++) {        lastID = startID + i;#if SHOW_UPDATE_OUTPUT        cout << "  Updating record " << lastID << "....\n";#endif        recSize = 40 + Random() % 10 + Random() % 10;	// rec sizes from 20 to 60 bytes        recP = MakeRecord(recSize);        recP->recID = lastID;        Try_ {            inDBFile->UpdateRecord(recP);            Try_ {                maxRecSize = inDBFile->GetRecordSize();	// check for fixed size records            }            Catch_ (inErr) {                cout << "FAILURE: GetRecordSize() caused an exception (1)\n";            }            Try_ {                recSize = inDBFile->GetRecordSize(lastID);            }            Catch_ (inErr) {                cout << "FAILURE: GetRecordSize(" << lastID <<") caused an exception (2)\n";            }            if (recSize != recP->recSize)                if (maxRecSize != recSize)                    cout << "FAILURE: GetRecordSize(" << lastID <<") != updated DatabaseRec.recSize\n";        }        Catch_ (inErr) {            cout << "FAILURE: UpdateRecord(" << lastID <<") caused an exception\n";        }        if (i < (numRecs-1))            FreeRecord(recP);    }    long stopCount = inDBFile->GetRecordCount();    if (startCount != stopCount)    	cout << "FAILURE: GetRecordCount says there are "<<stopCount<<" records instead of"<<startCount<<"\n";    bufferRecP = MakeRecord(200);  // make buffer big enough to hold any record    long buffRecSize = bufferRecP->recSize;    bufferRecP->recID = lastID;    Try_ {        inDBFile->ReadRecord(bufferRecP);       // try to read the last record back in        if (!RecordsEqual(bufferRecP, recP) )          cout << "FAILURE: ReadRecord(" << lastID <<") returns different data than UpdateRecord(" << lastID <<") put\n";    }    Catch_ (inErr) {        cout << "FAILURE: ReadRecord(" << lastID <<") caused an exception\n";    }#if TEST_EXCEPTIONS     cout << "  Trying to generate an Exception from UpdateRecord(-1)...\n";    recP->recID = -1; 	// impossible ID    Try_ {        inDBFile->UpdateRecord(recP);        cout << "FAILURE: UpdateRecord(-1) failed to cause an exception\n";    }    Catch_ (inErr) {        cout << "  Exception generated correctly.\n";    }#endif    FreeRecord(recP);    FreeRecord(bufferRecP);}// ------------------------------ Test Lifecycle ------------------------------// Adds a records using AddRecord(), then changes its size (larger, smaller, // larger), and finally deletes it// Uses GetNewRecordID() to get the ID to pass to AddRecord()// Verifies all changes using ReadRecord()// Verifies record deletion with ReadRecord() exception// -------------------------------------------------------------------------void    TestRecordLifecycle(ADataStore *inDBFile) {#if SHOW_LIFECYCLE_OUTPUT    cout << " ------------- Testing Record Lifecycle --------------\n";#endif    DatabaseRecPtr recP, bufferRecP;    bufferRecP = MakeRecord(200);  // make buffer big enough to hold any record    long buffRecSize = bufferRecP->recSize;    RecIDT newID;#if SHOW_LIFECYCLE_OUTPUT    cout << "  Creating record...\n";#endif    long recSize = 30 + Random() % 10;	// rec sizes from 20 to 40 bytes    recP = MakeRecord(recSize);    Try_ {        recP->recID = inDBFile->GetNewRecordID();    }    Catch_ (inErr) {        cout << "FAILURE: GetNewRecordID() caused an exception\n";    }#if SHOW_LIFECYCLE_OUTPUT    DrawRecord(recP);#endif    Try_ {        newID = inDBFile->AddRecord(recP);        Try_ {        	bufferRecP->recID = newID;			bufferRecP->recSize = buffRecSize;	// this is max size of our buffer            inDBFile->ReadRecord(bufferRecP);       // try to read the last record back in            if (!RecordsEqual(bufferRecP, recP) )                cout << "FAILURE: ReadRecord(" << newID <<") != data that AddRecord(" << newID <<") put (1)\n";        }        Catch_ (inErr) {            cout << "FAILURE: ReadRecord(" << newID <<") caused an exception (1)\n";        }        FreeRecord(recP);        recSize += 15 + Random() % 10; // rec now 35 to 65 bytes        recP = MakeRecord(recSize);				// grow the record by a bit        recP->recID = newID;#if SHOW_LIFECYCLE_OUTPUT        cout << "  Growing to " << recP->recSize << " bytes...\n";#endif        Try_ {            inDBFile->UpdateRecord(recP);        }        Catch_ (inErr) {            cout << "FAILURE: UpdateRecord(" << newID <<") caused an exception (2)\n";        }        Try_ {        	bufferRecP->recID = newID;			bufferRecP->recSize = buffRecSize;	// this is max size of our buffer            inDBFile->ReadRecord(bufferRecP);       // try to read the last record back in            if (!RecordsEqual(bufferRecP, recP) )                cout << "FAILURE: ReadRecord(" << newID <<") != data that UpdateRecord(" << newID <<") put (2)\n";        }        Catch_ (inErr) {            cout << "FAILURE: ReadRecord(" << newID <<") caused an exception (2)\n";        }        FreeRecord(recP);        recSize -= 20 + Random() % 10; // rec now 5 to 55 bytes        recP = MakeRecord(recSize);				// shrink the record by a bit        recP->recID = newID;#if SHOW_LIFECYCLE_OUTPUT        cout << "  Shrinking to " << recP->recSize << " bytes...\n";#endif        Try_ {            inDBFile->UpdateRecord(recP);        }        Catch_ (inErr) {            cout << "FAILURE: UpdateRecord(" << newID <<") caused an exception (3)\n";        }        Try_ {        	bufferRecP->recID = newID;			bufferRecP->recSize = buffRecSize;	// this is max size of our buffer            inDBFile->ReadRecord(bufferRecP);       // try to read the last record back in            if (!RecordsEqual(bufferRecP, recP) )                cout << "FAILURE: ReadRecord(" << newID <<") != data that UpdateRecord(" << newID <<") put (3)\n";        }        Catch_ (inErr) {            cout << "FAILURE: ReadRecord(" << newID <<") caused an exception (3)\n";        }        FreeRecord(recP);        recSize += 25 + Random() % 10; // rec now to from 20 to 100 bytes        recP = MakeRecord(recSize);				// grow the record by a lot        recP->recID = newID;#if SHOW_LIFECYCLE_OUTPUT        cout << "  Growing to " << recP->recSize << " bytes...\n";#endif        Try_ {            inDBFile->UpdateRecord(recP);        }        Catch_ (inErr) {            cout << "FAILURE: UpdateRecord(" << newID <<") caused an exception (4)\n";        }        Try_ {        	bufferRecP->recID = newID;			bufferRecP->recSize = buffRecSize;	// this is max size of our buffer            inDBFile->ReadRecord(bufferRecP);       // try to read the last record back in            if (!RecordsEqual(bufferRecP, recP) )                cout << "FAILURE: ReadRecord(" << newID <<") != data that UpdateRecord(" << newID <<") put (4)\n";        }        Catch_ (inErr) {            cout << "FAILURE: ReadRecord(" << newID <<") caused an exception (4)\n";        }        FreeRecord(recP);#if SHOW_LIFECYCLE_OUTPUT        cout << "  Deleting Record... \n";#endif        Try_ {            inDBFile->DeleteRecord(newID);        }        Catch_ (inErr) {            cout << "FAILURE: DeleteRecord(" << newID <<") caused an exception\n";    	}    }    Catch_ (inErr) {        cout << "FAILURE: AddRecord(" << newID <<") caused an exception\n";    }#if TEST_EXCEPTIONS #if SHOW_LIFECYCLE_OUTPUT    cout << "  Seeing if record was deleted; ReadRecord(" << newID <<") should generate an exception";    cout << "...\n";#endif    Try_ {        bufferRecP->recID = newID;        bufferRecP->recSize = buffRecSize;	// this is max size of our buffer        inDBFile->ReadRecord(bufferRecP);        cout << "FAILURE: ReadRecord(" << newID <<") didn't cause an exception\n";    }    Catch_ (inErr) {#if SHOW_LIFECYCLE_OUTPUT        cout << "  Exception generated, record was deleted correctly.\n";#endif    }#endif     FreeRecord(bufferRecP);}#pragma mark-voidStressTest(ADataStore *inDBFile, long seconds) {    DatabaseRecPtr recP, bufferRecP;	bufferRecP = MakeRecord(200);  // make buffer big enough to hold any record#if SHOW_STRESS_OUTPUT	DatabaseRecPtr errorRecP = MakeRecord(200);  // make another buffer big enough to hold any record#endif	long buffsize = bufferRecP->recSize;	long stopTicks = TickCount() + seconds*60;	int recSize, count;	long numRecs, newNumRecs;	int i;	long numDeletes = 0, numAdds = 0, numUpdates = 0;    RecIDT newID, ids[25];    for (i = 0; i<25; ids[i++]=0){}    cout << "Stress testing for " << seconds << " seconds...\n";	while (TickCount() < stopTicks) {	  #if _MacOS		EventRecord theEvent;		WaitNextEvent(1, &theEvent, 1, nil);	  #endif		count = 15 + Random() % 10;		// add 5 to 25 records		i = 0;		do {		    recSize = 45 + Random() % 20;	// rec sizes from 25 to 65 bytes		    recP = MakeRecord(recSize);		    numRecs = inDBFile->GetRecordCount() + 1;		    Try_ {		        newID = inDBFile->AddRecord(recP);		       	numAdds++;		        ids[i] = newID;		        Try_ {		        	bufferRecP->recID = newID;					bufferRecP->recSize = buffsize;	// this is max size of our buffer		            inDBFile->ReadRecord(bufferRecP);       // try to read the last record back in		            if (!RecordsEqual(bufferRecP, recP) )		                cout << "FAILURE: ReadRecord(" << newID <<") != data that AddRecord(" << newID <<") put\n";		        }		        Catch_ (inErr) {		            cout << "FAILURE: ReadRecord(" << newID <<") caused an exception "<< inErr<<" (1)\n";		        }		        newNumRecs = inDBFile->GetRecordCount();		        if ( numRecs != newNumRecs )		        	cout << "FAILURE: GetRecordCount() returns " << newNumRecs << ", not " << numRecs << "\n";			}						Catch_ (inErr) {		    	cout << "FAILURE: AddRecord(" << newID <<") caused an exception "<< inErr<<"\n";			}	        FreeRecord(recP);		} while ( (TickCount() < stopTicks) && (i++ < count));	 		count = 15 + Random() % 10;		// resize 5 to 25 records		i = 0;		do {			newID = ids[i];			        if (newID == 0)	        	continue;	// don't execute this loop iteration	        recSize = 85 + Random() % 80; // rec size now 5 to 160 bytes	        recP = MakeRecord(recSize);	        recP->recID = newID;	        Try_ {        	#if SHOW_STRESS_OUTPUT        		errorRecP->recID = newID;        		Try_ {        			inDBFile->ReadRecord(errorRecP);        		}        		Catch_ (inErr) {        			cout << "FAILURE: ReadRecord(" << newID <<") caused an exception "<< inErr<<"\n";        			cout << "   *** VERY BAD *** since it should have passed a read test already\n";         			cout << "   after it was added. I was trying to get it before Updating.\n";         		}        	#endif	            inDBFile->UpdateRecord(recP);	            numUpdates++;	        }	        Catch_ (inErr) {	            cout << "FAILURE: UpdateRecord(" << newID <<") caused an exception "<< inErr<<"\n";	        }	        Try_ {	        	bufferRecP->recID = newID;				bufferRecP->recSize = buffsize;	// this is max size of our buffer	            inDBFile->ReadRecord(bufferRecP);       // try to read the last record back in	            if (!RecordsEqual(bufferRecP, recP) ) {	                cout << "FAILURE: ReadRecord(" << newID <<") != data that UpdateRecord(" << newID <<") put\n";	        	#if SHOW_STRESS_OUTPUT	        		cout << "   *** record "<<newID<<" before update:\n";	        		DrawRecord(errorRecP);	        		cout << "   *** record "<<newID<<" as returned from update:\n";	        		DrawRecord(recP);	        		cout << "   *** record "<<newID<<" after update:\n";	        		DrawRecord(bufferRecP);				#endif				}	        }	        Catch_ (inErr) {	            cout << "FAILURE: ReadRecord(" << newID <<") caused an exception "<< inErr<<", attempted to confirm update (2)\n";	        }	        FreeRecord(recP);		} while ( (TickCount() < stopTicks) && (i++ < count));	 		count = 5 + Random() % 5;		// delete 0 to 10 records		i = 0;		while ( (TickCount() < stopTicks) && (i++ < count)) {			newID = ids[i];			        if (newID == 0)	        	continue;	// don't execute this loop iteration		    numRecs = inDBFile->GetRecordCount() - 1;	        Try_ {	            inDBFile->DeleteRecord(newID);	            numDeletes++;	            ids[i] = 0;	// make sure we don't try to delete it again		        newNumRecs = inDBFile->GetRecordCount();		        if ( numRecs != newNumRecs )		        	cout << "FAILURE: GetRecordCount() returns " << newNumRecs << ", not " << numRecs << "\n";	        }	        Catch_ (inErr) {	            cout << "FAILURE: DeleteRecord(" << newID <<") caused an exception "<< inErr<<"\n";	        }		}	} // end while	FreeRecord(bufferRecP); #if SHOW_STRESS_OUTPUT	FreeRecord(errorRecP); #endif	cout << "Performed: " << numAdds << " adds, " << numUpdates << " updates, & " << numDeletes << " deletes.\n" ;	cout << "There are now " << inDBFile->GetRecordCount() << " records in the file.\n";}voidSetRecordSizeFactor(int factor) {	gSizeFactor = factor;}voidTestSpecificProblem(ADataStore *inDBFile) {    DatabaseRecPtr recP, updateRecP;	DatabaseRecPtr bufferRecP = MakeRecord(500);	DatabaseRecPtr errorRecP = MakeRecord(500);    RecIDT newID;    cout << "Testing for a specific problem that was found on 1/30/96 in version 1.4...\n";    recP = MakeRecord(471);    Try_ {        newID = inDBFile->AddRecord(recP);        Try_ {        	bufferRecP->recID = newID;			bufferRecP->recSize = 500;	// this is max size of our buffer            inDBFile->ReadRecord(bufferRecP);       // try to read the last record back in            if (!RecordsEqual(bufferRecP, recP) )                cout << "FAILURE: ReadRecord(" << newID <<") != data that AddRecord(" << newID <<") put\n";        }        Catch_ (inErr) {            cout << "FAILURE: ReadRecord(" << newID <<") caused an exception "<< inErr<<" (1)\n";        }	}				Catch_ (inErr) {    	cout << "FAILURE: AddRecord(" << newID <<") caused an exception "<< inErr<<"\n";	}    updateRecP = MakeRecord(105);    updateRecP->recID = newID;    Try_ {		errorRecP->recID = newID;		Try_ {			inDBFile->ReadRecord(errorRecP);		}		Catch_ (inErr) {			cout << "FAILURE: ReadRecord(" << newID <<") caused an exception "<< inErr<<"\n";			cout << "   *** VERY BAD *** since it should have passed a read test already\n"; 			cout << "   after it was added. I was trying to get it before Updating.\n"; 		}        inDBFile->UpdateRecord(updateRecP);     }    Catch_ (inErr) {        cout << "FAILURE: UpdateRecord(" << newID <<") caused an exception "<< inErr<<"\n";    }    Try_ {    	bufferRecP->recID = newID;		bufferRecP->recSize = 500;	// this is max size of our buffer        inDBFile->ReadRecord(bufferRecP);       // try to read the last record back in        if (!RecordsEqual(bufferRecP, updateRecP) ) {            cout << "FAILURE: ReadRecord(" << newID <<") != data that UpdateRecord(" << newID <<") put\n";    		cout << "   *** record "<<newID<<" as returned from (and presumably sent to) adding:\n";    		DrawRecord(recP);    		cout << "   *** record "<<newID<<" as read in before update:\n";    		DrawRecord(errorRecP);    		cout << "   *** record "<<newID<<" as returned from update:\n";    		DrawRecord(updateRecP);    		cout << "   *** record "<<newID<<" as read in after update:\n";    		DrawRecord(bufferRecP);		}    }    Catch_ (inErr) {        cout << "FAILURE: ReadRecord(" << newID <<") caused an exception "<< inErr<<", attempted to confirm update (2)\n";    }	FreeRecord(bufferRecP); 	FreeRecord(errorRecP); 	FreeRecord(recP); 	FreeRecord(errorRecP); 	cout << "There are now " << inDBFile->GetRecordCount() << " records in the file.\n";}//#endif // _MacOS
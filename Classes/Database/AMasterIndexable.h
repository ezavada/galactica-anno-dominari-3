// =============================================================================// AMasterIndexable.h                       ©1995-2002, Sacred Tree Software, inc.// // Abstract mix-in class for items that use a master index.//// version 1.5.0//// created:   7/24/95, ERZ// modified:  7/27/95, ERZ	Made methods protected// modified:  3/29/96, ERZ	Removed mTrackRecSize field, made IsFixedSize() pure virtual,//							and removed destructor// modified:  7/25/96, ERZ	Vers 1.5, Added default constucture to simplify initialization// modified:  5/27/02, ERZ  converted to bool from MacOS Boolean, removed class typedefs//// =============================================================================#ifndef AMASTER_INDEXABLE_H_INCLUDED#define AMASTER_INDEXABLE_H_INCLUDED#include "DatabaseTypes.h"#include "AMasterIndex.h"class AMasterIndexable {friend class AMasterIndex;public:	  #ifndef DATABASE_V15		AMasterIndexable();	  #endif		AMasterIndexable(AMasterIndex *inMasterIndex);                virtual ~AMasterIndexable() {}	virtual void	SetMasterIndex(AMasterIndex *inMasterIndex);protected:	virtual bool	IsFixedSize() = 0;								// pure virtual, override to return true if all entries are same size	virtual UInt32	AddNewEmptySlot(SInt32 inSize) = 0;								// pure virtual, override to add new empty slot & return its pos	virtual SInt32	GetSlotSize(UInt32 inSlotPos);									// does nothing, override to return size of slot at inSlotPos	virtual void	MarkSlotDeleted(UInt32 inSlotPos, RecIDT recID);									// does nothing, override to mark slot at inSlotPos as deleted    virtual RecIDT  GetRecordAtSlot(UInt32 inSlotPos);                            // does nothing, override to return id number of record in slot at inSlotPos	AMasterIndex	*itsMasterIndex;};#endif // AMASTER_INDEXABLE_H_INCLUDED
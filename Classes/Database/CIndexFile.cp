// =============================================================================// CIndexFile.cp                  	    ©1995-96, Sacred Tree Software, inc.// // Index contains routines and objects needed for a index// file object for a database management system.//// version 1.5.1//// created:   7/28/95, ERZ// modified:  8/12/96, ERZ	changed OpenExisting() param order to match ::ResolveAlias()//// =============================================================================#include <UException.h>#include "CIndexFile.h"CIndexFile::CIndexFile(UDatabaseKey *inKey) : LFileStream(), AIndex(inKey) {  	itsStream = this;	// save this in itsStream so object refers to self}void	CIndexFile::OpenNew(FSSpec &inFileSpec, OSType inCreator, Int16 inPrivileges) {	SetSpecifier(inFileSpec);	CreateNewDataFile( inCreator, 'IdxF' );		//create file	OpenDataFork(inPrivileges);	ThrowIf_( Open() );			// Open() should always return false for a new file}#if _MacOS	// OS DEPENDENCY herevoidCIndexFile::OpenExisting(FSSpec *inFromFile, AliasHandle inAlias, Boolean *outAliasWasChanged,								Int16 inPrivileges) {	FSSpec theMacFileSpec;	OSErr err = ::ResolveAlias(inFromFile, inAlias, &theMacFileSpec, outAliasWasChanged);	ThrowIfOSErr_(err);	OpenExisting(theMacFileSpec, inPrivileges);}#endifvoidCIndexFile::OpenExisting(FSSpec &inFileSpec, Int16 inPrivileges) {	SetSpecifier(inFileSpec);	OpenDataFork(inPrivileges);	Boolean fileWasOpen = Open();	if ( mItemCount > mAllocatedSlots )		Throw_( dbIndexCorrupt );	if ( mAllocatedSlots < 0 )		Throw_( dbIndexCorrupt );	if ((inPrivileges == fsWrPerm) && fileWasOpen)		Throw_( dbIndexLeftOpen );	//fail if file open marker set and we want exclusive write}voidCIndexFile::Close() {	AIndex::Close();	CloseDataFork();}
// =============================================================================// UFieldComparators.h						©1997, Sacred Tree Software, inc.// // defines a collection of LComparator subclasses that can compare various types// of data in fields of records.//// version 1.0//// created:   1/20/97, ERZ// modified:  //// =============================================================================// See UFieldComparators.cp for documentation#pragma once#include "LComparator.h"typedef class UBoolComparator : public LComparator {public:	virtual Int32		Compare(const void* inItemOne, const void* inItemTwo, Uint32, Uint32) const;	static UBoolComparator*	GetComparator();	protected:	static UBoolComparator*	sBoolComparator;} UBoolComparator;typedef class ULongLongComparator : public LComparator {public:	virtual Int32		Compare(const void* inItemOne, const void* inItemTwo, Uint32, Uint32) const;	static ULongLongComparator*	GetComparator();	protected:	static ULongLongComparator*	sLongLongComparator;} ULongLongComparator;#define ULongComparator LLongComparator#define UFixedComparator LLongComparator#define URecIDComparator LLongComparatortypedef class UShortComparator : public LComparator {public:	virtual Int32		Compare(const void* inItemOne, const void* inItemTwo, Uint32, Uint32) const;	static UShortComparator*	GetComparator();	protected:	static UShortComparator*	sShortComparator;} UShortComparator;typedef class UCharComparator : public LComparator {public:	virtual Int32		Compare(const void* inItemOne, const void* inItemTwo, Uint32, Uint32) const;	static UCharComparator*	GetComparator();	protected:	static UCharComparator*	sCharComparator;} UCharComparator;typedef class UFloatComparator : public LComparator {public:	virtual Int32		Compare(const void* inItemOne, const void* inItemTwo, Uint32, Uint32) const;	static UFloatComparator*	GetComparator();	protected:	static UFloatComparator*	sFloatComparator;} UFloatComparator;typedef class UDoubleComparator : public LComparator {public:	virtual Int32		Compare(const void* inItemOne, const void* inItemTwo, Uint32, Uint32) const;	static UDoubleComparator*	GetComparator();	protected:	static UDoubleComparator*	sDoubleComparator;} UDoubleComparator;typedef class ULongDoubleComparator : public LComparator {public:	virtual Int32		Compare(const void* inItemOne, const void* inItemTwo, Uint32, Uint32) const;	static ULongDoubleComparator*	GetComparator();	protected:	static ULongDoubleComparator*	sLongDoubleComparator;} ULongDoubleComparator;typedef class UDataComparator : public LComparator {public:	virtual Int32		Compare(const void* inItemOne, const void* inItemTwo, Uint32, Uint32) const;	static UDataComparator*	GetComparator();	protected:	static UDataComparator*	sDataComparator;} UDataComparator;typedef class UTextComparator : public LComparator {public:	virtual Int32		Compare(const void* inItemOne, const void* inItemTwo, Uint32, Uint32) const;	static UTextComparator*	GetComparator();	protected:	static UTextComparator*	sTextComparator;} UTextComparator;typedef class UStrComparator : public LComparator {public:	virtual Int32		Compare(const void* inItemOne, const void* inItemTwo, Uint32, Uint32) const;	static UStrComparator*	GetComparator();	protected:	static UStrComparator*	sStrComparator;} UStrComparator;
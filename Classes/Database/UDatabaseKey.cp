// =============================================================================// UDatabaseKey.cp             	         	©1996, Sacred Tree Software, inc.// // UDatabaseKey is an abstract class for converting standard field data from a// record into a Key to be stored in an Index file.// // This file also contains UDatabase Key subclasses for the standard data types.//// It is a subclass of LComparator, so it knows how to compare keys as well.//// version 1.5.0//// created:   7/28/96, ERZ//// =============================================================================#include "UDatabaseKey.h"#include "UMemoryMgr.h"		// for :BlockCompare()voidUDatabaseKey::MakeKey(const void* inRawKeyData, void* outKeyData, UInt32 inRawSize) const {	UInt32 byteCount = GetKeySize();	if (inRawSize == -1)		inRawSize = byteCount;	if (inRawSize < byteCount) {	// data smaller than key (hopefully this doesn't happen often)		::BlockMoveData(inRawKeyData, outKeyData, inRawSize);	// copy the raw data		for (UInt32 i = inRawSize; i < byteCount; i++)			// and the fill the rest in with			((char*)outKeyData)[i] = 0;							// zeros	} else		::BlockMoveData(inRawKeyData, outKeyData, byteCount);}Int32UDatabaseKey::CompareKeys(const void* inKey1, const void* inKey2) const {	return ::BlockCompare(inKey1, inKey2, GetKeySize() );}Int32UDatabaseKey::CompareToKey(const void* inItem, Uint32 inSize, const void* inKey) const {	char* key = new char[ GetKeySize() ];	MakeKey(inItem, key, inSize);	Int32 compResult = CompareKeys(key, inKey);	delete key;	return compResult;}
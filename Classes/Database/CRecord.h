// =============================================================================// CRecord.cp								©1996-97, Sacred Tree Software, inc.// // CRecord is a class for managing a database record and its associated fields.// it depends on a UStructure class created from a 'Strc' resource to define// general field information.//// version 1.0.1 MacOS compiled and tested, Win32 compiled but not tested//// created:   7/22/96, ERZ// modified:  1/20/97, ERZ	added protected method GetFieldDataPtr()// modified:  5/27/02, ERZ  converted to bool from MacOS Boolean, removed class typedefs//// =============================================================================#pragma once#include "UStructure.h"#include "handle.h"			// cross platform handle classclass LComparator;class CRecord {public:    	CRecord(CRecord* inRecP) {mStructure = inRecP->mStructure; mRecData = inRecP->mRecData;}    	CRecord(CRecord& inRec) {mStructure = inRec.mStructure; mRecData = inRec.mRecData;}    	CRecord(UStructure* inStructure);    	CRecord(UStructure* inStructure, DatabaseRec* inDataP);		~CRecord();	CRecord&		operator=(CRecord& inRec) {mStructure = inRec.mStructure; 												mRecData = inRec.mRecData; 												return *this;}// record info methods	RecIDT		GetRecordID() const {return ((DatabaseRec*)*mRecData)->recID;}	Int32		GetRecordSize() const {return ((DatabaseRec*)*mRecData)->recSize;}// field info methods	Int32		GetFieldCount()	const {return mStructure->GetFieldCount();}    Int32		GetFieldSize(Int16 inFieldNum) const;	Int32		GetFieldMaxSize(Int16 inFieldNum) const {return mStructure->GetFieldMaxSize(inFieldNum);}    EFieldType	GetFieldType(Int16 inFieldNum) const {return mStructure->GetFieldType(inFieldNum);}    bool		HasField(Int16 inFieldNum) const {return mStructure->ValidFieldNum(inFieldNum);}// field access methods	handle		GetFieldData(Int16 inFieldNum) const;	void		SetFieldData(Int16 inFieldNum, handle &inFieldH);	void		GetFieldData(Int16 inFieldNum, void* ioFieldP) const;    void		SetFieldData(Int16 inFieldNum, void* inFieldP, Int16 inFieldSize = 0);    int			CompareFieldData(Int16 inFieldNum, void* inFieldP, Int16 inDataSize = 0,    								LComparator *inComp = (LComparator*)nil) const;// flag access methods	bool		FlagIsSet(Int16 inFieldNum) const;	void		SetFlag(Int16 inFieldNum, bool inFlagValue = true);	void		ClearFlag(Int16 inFieldNum) {SetFlag(inFieldNum, false);}// you shouldn't have to use this one, and if you do, the DataStore may not like it	void		SetRecordID(RecIDT inRecID) {((DatabaseRec*)*mRecData)->recID = inRecID;}	// low level record access	UStructure*		GetRecordStructure() const {return mStructure;}	handle&			GetRecordData() const {return (handle&)mRecData;}	DatabaseRec*	GetRecordDataPtr() const {return (DatabaseRec*)*mRecData;}	void			LockRecord() {mRecData.lock();}	void			UnlockRecord() {mRecData.unlock();}protected:	UStructure*		mStructure;	handle			mRecData;		void	GetFieldDataPtr(Int16 inFieldNum, void* &outFieldP, Int32 &outFieldSize) const;	void	CalcVarFieldSizeAndOffset(Int16 inFieldNum, Int32 &outSize, Int32 &outOffset) const;};typedef class AutoLockRecord {	CRecord* rec;public:	AutoLockRecord(CRecord* inRecord) {rec = inRecord; rec->LockRecord();}	~AutoLockRecord() {rec->UnlockRecord();}} AutoLockRecord;
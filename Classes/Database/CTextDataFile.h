// =============================================================================// CTextDataFile.h							 ©1995-96, Sacred Tree Software, inc.// // Class for variable size blocks (usually of text) in database files. //// version 1.5.1//// created:	  7/2/95, ERZ// modified:  7/27/95, ERZ	Changes to inherit from ADataStore & LFileStream// modified:  3/29/96, ERZ	rewrote Initialization process, added OpenNew() & OpenExisting(),//							and removed destructor and Open() methods// modified:  7/24/96, ERZ	ver 1.5, simplified initialization process, platform independant// modified:  8/12/96, ERZ	changed OpenExisting() param order to match ::ResolveAlias()//// =============================================================================#pragma once#include <LFileStream.h>#include "ADataStore.h"typedef class CTextDataFile : public ADataStore , public LFileStream {public:		#if DB_V15	// include ver 1.5 stuff			CTextDataFile(Int16 inStrcResID = resID_Undefined);		#else			CTextDataFile();		#endif				void	OpenNew(FSSpec &inFileSpec, OSType inCreator, Int16 inPrivileges = fsWrPerm);	// creates and initializes new data file#if _MacOS	void	OpenExisting(FSSpec *inFromFile, AliasHandle inAlias, Boolean *outAliasWasChanged,						Int16 inPrivileges = fsWrPerm);#endif	void	OpenExisting(FSSpec &inFileSpec, Int16 inPrivileges = fsWrPerm);	virtual void		Close();// data access methods	virtual RecIDT		GetNewRecordID(DatabaseRec *inRecP = (DatabaseRec*)nil);	virtual Uint32		GetRecordCount() const;	virtual void		ReadRecord(DatabaseRec *ioRecP);	virtual Boolean		FindRecord(DatabaseRec *ioRecP, LComparator *inComparator = (LComparator*)nil);	virtual RecIDT		AddRecord(DatabaseRec *inRecP);	virtual void		UpdateRecord(DatabaseRec *inRecP);	virtual void		DeleteRecord(RecIDT inRecID);	virtual Int32		GetRecordSize(RecIDT inRecID = 0);// list iteration methods	virtual Uint32		GetCount() const;	virtual Boolean		FetchItemAt(IndexT inAtIndex, void *outItem);	virtual Boolean		FetchItemAt(IndexT inAtIndex, void *outItem, Uint32 &);	protected:	virtual Uint32		AddNewEmptySlot(Int32 inSize);	virtual Boolean		ReadHeader();	virtual void		WriteHeader(Boolean inFileOpen = true);	Uint32		mItemCount;				// # items in use (number of slots used)	Int32		mAllocBlockSize;		// number of bytes to allocate at a time	Int32		mFirstItemPos;			// file position of first item slot	Uint32		mNumValidRecs;			// # valid records in the datafile	Uint32		mAllocatedBytes;		// space allocated to file	Uint32		mBytesUsed;				// space used in file	Int32		mLargestRecSize;		// size of the largest record in the datafile	Uint32		mFirstDeletedSlotPos;	Uint32		mLastItemFetchedNum;	// holds last item # retrieved by FetchItemAt()	Uint32		mLastItemFetchedPos;	// holds position of last item from FetchItemAt()private:	void	ReadSegments(Uint32 startPos, char *buffer, Int32 bytes);} CTextDataFile, *CTextDataFilePtr, **CTextDataFileHnd, **CTextDataFileHdl;
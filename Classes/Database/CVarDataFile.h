// =============================================================================// CVarDataFile.h						 ©1995-2002, Sacred Tree Software, inc.// // Class for variable size record database files. //// version 1.5.8//// created:	  6/29/95, ERZ// modified:  7/17/95, ERZ	Added Sort() and mNumUnsortedAdds & Deletes// modified:  7/25/95, ERZ	inherited from CDataFile// modified:  3/29/96, ERZ	rewrote Initialization process// modified:   4/3/96, ERZ	added override of FetchItemAt()// modified:  7/24/96, ERZ	ver 1.5, simplified initialization process, platform independant// modified:  5/27/02, ERZ  v1.5.8, converted to bool from MacOS Boolean, removed class typedefs// modified:  9/24/05, ERZ  added Backup() to create backup version of files//// =============================================================================#ifndef CVARDATAFILE_H_INCLUDED#define CVARDATAFILE_H_INCLUDED#include "CDataFile.h"class CVarDataFile : public CDataFile {public:		#if DB_V15			 CVarDataFile(SInt16 inStrcResID = resID_Undefined);		#else			 CVarDataFile(AMasterIndex *inMasterIndex);		#endif	virtual bool		Open();	virtual void		Close();		virtual bool        CheckDatabaseIntegrity(bool inRepairProblems);	virtual void        Backup(const char* appendToFilename);	virtual bool	    IsFixedSize() {return false;}	// data access methods	virtual bool		FetchItemAt(IndexT	inAtIndex, void	*outItem, UInt32 &ioItemSize);	virtual void		ReadRecord(DatabaseRec *ioRecP);	virtual bool		FindRecord(DatabaseRec *ioRecP, LComparator *inComparator = (LComparator*)nil);	virtual RecIDT		AddRecord(DatabaseRec *inRecP);	virtual void		UpdateRecord(DatabaseRec *inRecP);	virtual SInt32		GetRecordSize(SInt32 inRecID = 0);protected:	virtual UInt32		AddNewEmptySlot(SInt32 inSize);		virtual SInt32		GetSlotSize(UInt32 inSlotPos);			virtual void		MarkSlotDeleted(UInt32 inSlotPos, RecIDT inRecID);		    virtual RecIDT      GetRecordAtSlot(UInt32 inSlotPos);	virtual bool		ReadHeader();	virtual void		WriteHeader(bool inFileOpen = true);	SInt32		mAllocatedBytes;	SInt32		mBytesUsed;	SInt32		mLargestRecSize;	bool        mFileIsDamaged;};#endif // CVARDATAFILE_H_INCLUDED
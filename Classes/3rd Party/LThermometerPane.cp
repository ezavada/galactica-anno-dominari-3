/*	File:		LThermometerPane.cp	Contains:	Thermometer indicator pane for PowerPlant.				An LProgressIndicator subclass.					Version:	2.0	Author:		Chris K. Thomas, ckt@best.com		Copyright:	©1995 Chris K. Thomas.  All Rights Reserved.*/#include <UMemoryMgr.h>#include <UDrawingState.h>#include <LStream.h>#include "LThermometerPane.h"const short kStripesPatID = 128;LThermometerPane::LThermometerPane(LStream *inStream):LPane(inStream){	mRight = 0;	mOriginOffset = 0;	//	// setup default values	//	SInt32 min, max, value;	*inStream >> value;	*inStream >> min;	*inStream >> max;		SetMinValue(min);	SetMaxValue(max);	SetCurrentValue(value);}LThermometerPane::LThermometerPane(const	SPaneInfo	&inPaneInfo,											SInt32		inMin,											SInt32		inMax,											SInt32		inStartMax): LPane(inPaneInfo){	mMinValue = inMin;	mMaxValue = inMax;	mCurValue = inStartMax;	mRight = 0;	mOriginOffset = 0;}LThermometerPane::~LThermometerPane(){}//// ÑÑ¥ Calculations ÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑ//// * Making progress absolutelyvoid LThermometerPane::CompletedThisMuch(SInt32 inThisMuch){	if(inThisMuch > GetMaxValue())	{		return;	}	else if(inThisMuch < GetMinValue())	{		return;	}		mCurValue = inThisMuch;	ValueChanged();}// * Making progress incrementallyvoid LThermometerPane::CompletedThisMuchMore(SInt32 inThisMuchMore){	CompletedThisMuch(mCurValue + inThisMuchMore);}//// ¥ ValueChanged - we've made progress!  Let's//	update the display to reflect this!//	from LProgressIndicator//void LThermometerPane::ValueChanged(){	if(FocusDraw())	{		Rect	r;		short	length;				CalcLocalFrameRect(r);				InsetRect(&r, 1, 1);				length = r.right - r.left;		mRight = length * mCurValue / (mMaxValue - mMinValue);				DrawInside();	}}//// ÑÑ¥ Imaging ÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑ////// ¥	DrawSelf - from LPane//void LThermometerPane::DrawSelf(){	DrawBox();	DrawInside();}//// ¥	DrawBox - draw our border//void LThermometerPane::DrawBox(){	Rect			r;	StColorState	currStateSavor;		CalcLocalFrameRect(r);		StColorState::Normalize();		FrameRect(&r);}//// ¥	DrawInside - draw our inner self//void LThermometerPane::DrawInside(){	Rect			r;	StColorState	currStateSavor;		CalcLocalFrameRect(r);		StColorState::Normalize();		InsetRect(&r, 1, 1);		Rect 		empty, full;//			RGBColor	emptyColor, fullColor;		empty = full = r;	empty.left = mRight + r.left + 1;	//mRight starts from port origin	full.right = mRight + r.left;	//	GetWctbColor(GetMacPort(), wTingeLight, &emptyColor);//	GetWctbColor(GetMacPort(), wTingeDark, &fullColor);	//	RGBForeColor(&emptyColor);    ::ForeColor(blackColor);	::PaintRect(&empty);//	RGBForeColor(&fullColor);    ::ForeColor(blueColor);	::PaintRect(&full);  #if TARGET_API_MAC_CARBON	GrafPtr dstPort = GetMacPort();    ::QDFlushPortBuffer(dstPort, NULL);  #endif}
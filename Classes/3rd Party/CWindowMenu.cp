// =================================================================================//	CWindowMenu.cp						й1995 Metrowerks Inc. All rights reserved.// =================================================================================//	CWindowMenu.h	#include <LCommander.h>#include <LWindow.h>#include <PP_Messages.h>#include <UDesktop.h>#include "GenericUtils.h"#include "CWindowMenu.h"// ---------------------------------------------------------------------------------//		е CWindowMenu// ---------------------------------------------------------------------------------CWindowMenu::CWindowMenu()	: mBaseItems( 0 ){}// ---------------------------------------------------------------------------------//		е CWindowMenu// ---------------------------------------------------------------------------------CWindowMenu::CWindowMenu(	ResIDT	inMenuID )		: LMenu( inMenuID ), mBaseItems( 0 ){}// ---------------------------------------------------------------------------------//		е CWindowMenu// ---------------------------------------------------------------------------------CWindowMenu::CWindowMenu(	SInt16	inMenuID,	Str255	inTitle )		: LMenu( inMenuID, inTitle ), mBaseItems( 0 ){}// ---------------------------------------------------------------------------------//		е ~CWindowMenu// ---------------------------------------------------------------------------------CWindowMenu::~CWindowMenu(){}// ---------------------------------------------------------------------------------//		е InsertWindow// ---------------------------------------------------------------------------------voidCWindowMenu::InsertWindow(	const LWindow	*inWindow ){	// If window is not in list already.	if ( mWindowList.FetchIndexOf( &inWindow ) == LArray::index_Bad ) {	//еее ERZ mod			// If this is the first window in the list.		if ( mWindowList.GetCount() == 0 ) {					// Get the base item count.			mBaseItems = ::CountMenuItems( GetMacMenuH() );						if ( mBaseItems > 0 ) {					// Add a separator and increment the number of base items.				InsertCommand( "\p(-", cmd_Nothing, mBaseItems );				mBaseItems++;						}				}				// Add the window to the list.		mWindowList.InsertItemsAt( 1, LArray::index_Last, &inWindow );	// еее ERZ mod				// Get the window title.		Str255	theTitle;		inWindow->GetDescriptor( theTitle );				// Insert the window title into the menu as a -1 item.		// First, insert a blank item, since InsertCommand uses		// the toolbox InsertMenuItem which interprets metacharacters,		// then set the item text manually.		InsertCommand( "\p ", cmd_UseMenuItem, 16000 );		::SetMenuItemText( GetMacMenuH(), ::CountMenuItems( GetMacMenuH() ), theTitle );		// Renumber the command keys.		SetCommandKeys();		} else { // Already in list		// Get the window title.		Str255	theTitle;		inWindow->GetDescriptor( theTitle );			// Change the menu item text.		::SetMenuItemText( GetMacMenuH(), WindowToMenuItem( inWindow ), theTitle );		}}// ---------------------------------------------------------------------------------//		е RemoveWindow// ---------------------------------------------------------------------------------voidCWindowMenu::RemoveWindow(	const LWindow	*inWindow ){	if ( mWindowList.FetchIndexOf( &inWindow ) == LArray::index_Bad )	// еее ERZ mod		return;	// Remove the item from the menu.	RemoveItem( mWindowList.FetchIndexOf( &inWindow ) + mBaseItems );	// Remove the window from the list.	mWindowList.Remove( &inWindow );	if ( mWindowList.GetCount() == 0 && mBaseItems > 1 ) {			// Remove the separator and decrement the number of base items.		RemoveItem( mBaseItems );		mBaseItems--;		Assert_( ::CountMItems( GetMacMenuH() ) == mBaseItems );	}	// Renumber the command keys.	SetCommandKeys();}// ---------------------------------------------------------------------------------//		е MenuItemToWindow// ---------------------------------------------------------------------------------LWindow *CWindowMenu::MenuItemToWindow(	SInt16	inMenuItem ){	LWindow	*theWindow = nil;	// Get the window from the list.	mWindowList.FetchItemAt( inMenuItem - mBaseItems, &theWindow );		return theWindow;}// ---------------------------------------------------------------------------------//		е WindowToMenuItem// ---------------------------------------------------------------------------------SInt16CWindowMenu::WindowToMenuItem(	const LWindow	*inWindow ){	SInt16		theItem;	ArrayIndexT	theIndex;		// Get the window index in the list.	theIndex = mWindowList.FetchIndexOf( &inWindow );		if ( theIndex != LArray::index_Bad ) {		// еее ERZ mod			// Calculate the menu item number.		theItem = mBaseItems + theIndex;		Assert_( theItem <= ::CountMItems( GetMacMenuH() ) );	}	return theItem;}// ---------------------------------------------------------------------------------//		е SetCommandKeys// ---------------------------------------------------------------------------------voidCWindowMenu::SetCommandKeys(){	SInt16	theItem = mBaseItems + 1;	SInt16	theItemCount = ::CountMenuItems( GetMacMenuH() );	SInt16	theCommand = '1';	while ( theItem <= theItemCount && theCommand <= '9' ) {		// Set the menu item command key.		::SetItemCmd( GetMacMenuH(), theItem, theCommand );				// Increment the menu item index and command number.		++theItem;		++theCommand;	}}
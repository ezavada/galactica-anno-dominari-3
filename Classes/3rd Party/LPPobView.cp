// ===========================================================================//		е LPPobView.cp				й 1995, Гric Forget. All rights reserved.// ===========================================================================////	************************************************************************//	*                                                                      *//	*	Before using this code you should read the "License Agreement"     *//	*	document and agree with it.                                        *//	*                                                                      *//	************************************************************************////	LPPobView is a class that will load a PPob resource and put the//	superview of this hierarchy as a subview of the LPPobView's superview.////	It is useful when you want to have a few view that are superposed as//	in preferences panels.//// ---------------------------------------------------------------------------////	Instruction Notes://	-----------------////	1) Write a PPob resource with Constructor (or whatever you want!) which is//	   a View;////	2) In the class you want to insert the View, insert a LPPobView;////	3) At the beginning of your application, add the call:////		URegistrar::RegisterClass(LPPobView::class_ID, LPPobView::CreatePPobViewStream);////	4) In your application you can use the inserted view as if is was//	   created inside the Window or the dialog in the first time.//// ---------------------------------------------------------------------------#include "LPPobView.h"#include <LStream.h>#include <LArrayIterator.h>#include <UReanimator.h>// ---------------------------------------------------------------------------//		е LPPobView()// ---------------------------------------------------------------------------//	Default ConstructorLPPobView::LPPobView(){	InitPPobView(0);	// еее ERZ change, was -1}// ---------------------------------------------------------------------------//		е LPPobView(const LPPobView&)// ---------------------------------------------------------------------------//	Copy Constructor////	Does shallow copy; SubPanes are not copied.LPPobView::LPPobView(	const LPPobView	&inOriginal)		: LView(inOriginal){	InitPPobView(inOriginal.mViewID);}// ---------------------------------------------------------------------------//		е LPPobView(SPaneInfo&, SViewInfo&)// ---------------------------------------------------------------------------//	Construct View from input parametersLPPobView::LPPobView(	const SPaneInfo	&inPaneInfo,	const SViewInfo &inViewInfo,	const ResIDT	inViewID)		: LView(inPaneInfo, inViewInfo){	InitPPobView(inViewID);}// ---------------------------------------------------------------------------//		е LPPobView(LStream*)// ---------------------------------------------------------------------------//	Construct View from data in a StreamLPPobView::LPPobView(	LStream	*inStream)		: LView(inStream){	ResIDT		viewID;			*inStream >> viewID;		InitPPobView(viewID);}// ---------------------------------------------------------------------------//		е ~LPPobView// ---------------------------------------------------------------------------//	Destructor//LPPobView::~LPPobView(){	}// еее ERZ addition, overrode method OrientSubPane() inherited from LView//	expand a pane to fit into the full frame of the view, the do all the standard// orientation: enable, set visable, etc..voidLPPobView::OrientSubPane(LPane *inSub) {	ExpandSubPane(inSub, true, true);	LView::OrientSubPane(inSub);}// еее ERZ addition, new method SetPPob()void	LPPobView::SetPPob(ResIDT inViewID) {	if (inViewID != mViewID) {		// first deactivate the current PPob View		if (mActiveView) {			mActiveView->Disable();			mActiveView->Hide();		}		// now try to find another one with the correct ID		LArrayIterator iterator(mSubPanes, LArrayIterator::from_Start);		while (iterator.Next(&mActiveView)) {			if (mActiveView->GetPaneID() == inViewID) {				mViewID = inViewID;				mActiveView->Enable();				mActiveView->Show();				break;			} else				mActiveView = nil;		}		if (!mActiveView) {			InitPPobView(inViewID);	    }		Refresh();	}}// ---------------------------------------------------------------------------//		е InitPPobView// ---------------------------------------------------------------------------voidLPPobView::InitPPobView(	const ResIDT	inViewID){	mViewID = inViewID;	mActiveView = nil;	// еее ERZ addition	if(mViewID) {	// еее ERZ change, was if (mViewID != -1)		//		SetDefaultView(mSuperView);	// еее ERZ change		SetDefaultView(this);	// еее ERZ change		mActiveView = (LView *) UReanimator::ReadObjects('PPob', mViewID);	// еее ERZ change, assigned to mActiveView		if (mActiveView) {			mActiveView->FinishCreate();			mActiveView->SetPaneID(inViewID);	// еее ERZ Change, make sure the Pane ID matches the PPob resource ID		}	}}
//// ===========================================================================//	 Slider.h						©1994 Scott Squires// ===========================================================================//#pragma once#include "LView.h"#include <LBroadcaster.h>#include <QDOffscreen.h>#include <UGWorld.h>class Slider : public LView, public LBroadcaster {public:	Slider(void);	Slider(short BasePictRes, short SliderPictRest);	Slider(ResIDT BasePictRes, ResIDT SliderPictRes, ResIDT SlideSelectPictRes); 	Slider(LStream *inStream); 	virtual ~Slider(void);	void 			SetDefaults(void);	Boolean 		MakeSlider(void);	void 			SetPicts(ResIDT BasePictRes, ResIDT SliderPictRes);	void 			SetPicts(ResIDT BasePictRes, ResIDT SliderPictRes, ResIDT SlideSelectPictRes);	void 			OffsetSlider(short Xoffset, short Yoffset);	virtual void 	DrawSelf();	Boolean 		PointInSlider(Point thePoint);	virtual void 	ClickSelf(const SMouseDownEvent &inMouseDown) =0;  // OverRide	virtual void 	TrackSlider(Point oldMouse) =0;					// OverRide	virtual long 	GetSliderValue(void) {return mValue;}	virtual void 	SetSliderValue(long theValue) =0;					// OverRide	virtual long 	CalcSliderValue(void) = 0;							// OverRide	void 			SetMinMax(long theMin, long theMax);	long			GetMin() {return mMinSliderValue;}	long			GetMax() {return mMaxSliderValue;}	void 			DoAction(void);	virtual void 	BroadcastValueMessage();	MessageT 		GetValueMessage() const;	void 			SetValueMessage(MessageT inValueMessage);	void 			SetCursorFlag(Boolean theFlag);	void 			SetSliderOnlyFlag(Boolean theFlag);	Boolean			IsLocked() {return mLocked;}	virtual void	SetSliderLock(Boolean inLock) {mLocked = inLock;}protected:	ResIDT mBasePictID;							// PICT res#						ResIDT mSliderPictID;	ResIDT mSliderSelectPictID;	Rect mBasePictRect;							// Rectangles	Rect mSliderRect;	LGWorld *mBaseGWorld;						// LGWorlds	LGWorld *mSliderGWorld;	LGWorld *mSliderSelectGWorld;	LGWorld *mWorkGWorld;	long mBaseLength;							// Pixel size of base picture	long mBaseHeight;	long mMinSliderValue;	long mMaxSliderValue;	MessageT mValueMessage;						// message to send	SInt32 mValue;								// true value	Boolean mSelected;							// true if selected/tracking	Boolean mSliderCursor;						// false = hide cursor when tracking, true is default	Boolean mSliderOnly;						// true means only the slider itself is active	Boolean mLocked;							// true means slider not moveable};//// ===========================================================================//	 HorzSlider Class						// ===========================================================================//class HorzSlider : public Slider {public:	enum {		class_ID = 'Hsld'	};	HorzSlider();	HorzSlider(ResIDT BasePictRes, ResIDT SliderPictRes);    HorzSlider(ResIDT BasePictRes, ResIDT SliderPictRes, ResIDTSlideSelectPictRes);	HorzSlider(LStream *inStream);	virtual ~HorzSlider();	virtual void TrackSlider(Point oldMouse);	virtual void ClickSelf(const SMouseDownEvent &inMouseDown);	virtual long CalcSliderValue(void);	virtual void SetSliderValue(long theValue);};//// ===========================================================================//	 VertSlider Class						// ===========================================================================//class VertSlider : public Slider {public:	enum {		class_ID = 'Vsld'	};	VertSlider();	VertSlider(ResIDT BasePictRes, ResIDT SliderPictRes);	VertSlider(ResIDT BasePictRes, ResIDT SliderPictRes, ResIDTSlideSelectPictRes); 	VertSlider(LStream *inStream);	virtual ~VertSlider();	virtual void TrackSlider(Point oldMouse);	virtual void ClickSelf(const SMouseDownEvent &inMouseDown);	virtual long CalcSliderValue(void);	virtual void SetSliderValue(long theValue);}; 
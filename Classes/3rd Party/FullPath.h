/*     File:       FullPath.h      Contains:   Routines for dealing with full pathnames... if you really must.      Version:    Originally: MoreFiles 1.5.2				 Extensively Modified to work with POSIX, and native (MacOS, and Win32)				 paths by Ed Zavada      Copyright:  copyright (c) 2005 by Edmund R. Zavada, all rights reserved.				 portions (c) 1995-2001 by Apple Computer, Inc., all rights reserved.*//* ORIGINAL APPLE LICENSE:    You may incorporate this sample code into your applications without    restriction, though the sample code has been provided "AS IS" and the    responsibility for its operation is 100% yours.  However, what you are    not permitted to do is to redistribute the source as "DSC Sample Code"    after having made changes. If you're going to re-distribute the source,    we require that you make it clear in the source that the code was    descended from Apple Sample Code, but that you've made changes.    IMPORTANT NOTE:ORIGINAL APPLE NOTES:    The use of full pathnames is strongly discouraged. Full pathnames are    particularly unreliable as a means of identifying files, directories    or volumes within your application, for two primary reasons:        *   The user can change the name of any element in the path at        virtually any time.    *   Volume names on the Macintosh are *not* unique. Multiple        mounted volumes can have the same name. For this reason, the use of        a full pathname to identify a specific volume may not produce the        results you expect. If more than one volume has the same name and        a full pathname is used, the File Manager currently uses the first        mounted volume it finds with a matching name in the volume queue.        In general, you should use a file’s name, parent directory ID, and    volume reference number to identify a file you want to open, delete,    or otherwise manipulate.        If you need to remember the location of a particular file across    subsequent system boots, use the Alias Manager to create an alias    record describing the file. If the Alias Manager is not available, you    can save the file’s name, its parent directory ID, and the name of the    volume on which it’s located. Although none of these methods is    foolproof, they are much more reliable than using full pathnames to    identify files.        Nonetheless, it is sometimes useful to display a file’s full pathname    to the user. For example, a backup utility might display a list of full    pathnames of files as it copies them onto the backup medium. Or, a    utility might want to display a dialog box showing the full pathname of    a file when it needs the user’s confirmation to delete the file. No    matter how unreliable full pathnames may be from a file-specification    viewpoint, users understand them more readily than volume reference    numbers or directory IDs. (Hint: Use the TruncString function from    TextUtils.h with truncMiddle as the truncWhere argument to shorten    full pathnames to a displayable length.)        The following technique for constructing the full pathname of a file is    intended for display purposes only. Applications that depend on any    particular structure of a full pathname are likely to fail on alternate    foreign file systems or under future system software versions.*/#ifndef __FULLPATH__#define __FULLPATH__#ifndef __MACTYPES__#include <MacTypes.h>#endif#ifndef __FILES__#include <Files.h>#endif#ifdef __cplusplusextern "C" {#endif/*****************************************************************************/OSErr FSpGetNativeFullPath(const FSSpec* spec, char* outFullPath, long bufferSize);/*    The FSpGetNativeFullPath function works exactly like the FSpGetPosixFullPath	function except that it returns an OS native path rather than a POSIX path		See Also: FSpGetPosixFullPath	*/OSErr FSpGetPosixFullPath(const FSSpec* spec, char* outFullPath, long bufferSize);/*    The FSpGetPosixFullPath function builds a full pathname to the specified    object. The full pathname is returned in the buffer passed in as outFullPath    and the length is limited to the bufferSize you pass in.        Note that a full pathname can be made to a file/directory that does not    yet exist if all directories up to that file/directory exist. In this case,    FSpGetPosixFullPath will return a fnfErr.        IMPORTANT: The definition of a FSSpec is a volume reference number (not a    drive number, working directory number, or 0), a parent directory ID (not 0),    and the name of a file or folder (not an empty name, a full pathname, or    a partial pathname containing one or more colon (:) characters).    FSpGetPosixFullPath assumes it is getting a FSSpec that matches the rules.    spec            input:  An FSSpec record specifying the object.    fullPathLength  output: The number of characters in the full pathname.                            If the function fails to create a full pathname,                            it sets fullPathLength to 0.    fullPath        output: A handle to the newly created full pathname                            buffer. If the function fails to create a                            full pathname, it sets fullPath to NULL.        Result Codes        noErr               0       No error            nsvErr              -35     No such volume        ioErr               -36     I/O error        bdNamErr            -37     Bad filename        fnfErr              -43     File or directory does not exist (fullPath                                    and fullPathLength are still valid)        paramErr            -50     No default volume        memFullErr          -108    Not enough memory        dirNFErr            -120    Directory not found or incomplete pathname        afpAccessDenied     -5000   User does not have the correct access        afpObjectTypeErr    -5025   Directory not found or incomplete pathname        __________        See also:   FSpGetNativeFullPath*//*****************************************************************************/OSErr FSpMakeFSSpecFromPosixFullPath(const char *fullPath, FSSpec &spec);/*    The FSpMakeFSSpecFromPosixFullPath function returns a FSSpec to the object    specified by full a Posix full pathname. This function requires the Alias Manager.        fullPath        input:  A pointer to a c string that contains the full                            Posix pathname of the target. The full pathname                            starts with a '/', the name of the volume, includes                            all of the directory names in the path to the                            target, spearated by slashes '/', and ends with 							the target name.    spec            output: An FSSpec record specifying the object.        Result Codes        noErr               0       No error        nsvErr              -35     The volume is not mounted        fnfErr              -43     Target not found, but volume and parent                                    directory found        paramErr            -50     Parameter error        usrCanceledErr      -128    The user canceled the operation        __________        See also:   FSpMakeFSSpecFromNativeFullPath*//*****************************************************************************/OSErr FSpMakeFSSpecFromNativeFullPath(const char *fullPath, FSSpec &spec);/*    The FSpMakeFSSpecFromNativeFullPath function returns a FSSpec to the object    specified by a nativefull pathname. This function requires the Alias Manager.        fullPath        input:  A pointer to a c string that contains the full                            pathname of the target in the native format for 							the target OS. The full pathname                            starts with the name of the volume, includes                            all of the directory names in the path to the                            target, and ends with the target name.							In Classic MacOS and Mac OS X Carbon,     spec            output: An FSSpec record specifying the object.        Result Codes        noErr               0       No error        nsvErr              -35     The volume is not mounted        fnfErr              -43     Target not found, but volume and parent                                    directory found        paramErr            -50     Parameter error        usrCanceledErr      -128    The user canceled the operation        __________        See also:   FSpMakeFSSpecFromPosixFullPath*//*****************************************************************************/#ifdef __cplusplus}#endif#endif /* __FULLPATH__ */
AGalacticThingy has several methods for storage:AGalacticThingy(LView *inSuperView, LStream *inStream);	Creates a new thingy from the data in a stream. This is different than the usual 'PPob'	stream constructor in that subclasses such as LPane are not given the chance to read their	data from the stream. The LPane is initialized complete under the control of the Thingy.	The Thingy also has all values initialized and is added to the superview	void FinishCreateSelf();	Must be called after all Thingys have been constructed from a stream. Currently identical	to FinishStreaming() but there may eventually be cases where the are different.void ReadStream(LStream *inStream);	Called to reconstruct an existing Thingy from a stream. Identical to the stream based	constructor except it presumes the thing has already been initialized and placed in a	superview.void WriteStream(LStream *inStream);	will write data to a stream that can be used by any of the stream based retrieval methods	including: AGalacticThingy(LStream*), ReadStream(LStream*), and UpdateFromStream(LStream*)	void UpdateFromStream(LStream *inStream);	behaves exactly as ReadStream() does except does not change User Interface information. void FinishStreaming();	call for every thingy that did a ReadStream() or UpdateFromStream() after all streaming is	complete. Currently does exactly the same thing as FinishCreateSelf(), but I thought there	might be differences at some point.	 void WriteToDataStore();	adds or updates thingy in database. This method is also were a Pane ID is assigned to a	newly created thingy. Every thingy must have a unique pane ID in order for streaming to	work properly, so the host must call this method before trying to stream out other thingys	that have any possibility of referring to the new one. This method functions by creating	a handle stream, calling WriteStream() to write itself into the handle, and the writing	the handle to the DataStore using the PaneID as the RecordID	void ReadFromDataStore(RecIDT inNewID = 0);	reads itself from the database, using inNewID as the RecordID if it isn't 0. It works 	just like WriteToDataStore() only in reverse. void UpdateFromDataStore();	Behaves like ReadFromDataStore() with 2 differences. The object is only being updated, so	it should already have a valid Pane/Record ID. Also, instead of calling ReadStream(), this	method calls UpdateFromStream to preserve the user interface items.The life of a Thingy:Host:	AThingy( superview);		// constructs the object	WriteToDataStore();			// adds it to the database and assigns it an id	